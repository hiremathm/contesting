{"ast":null,"code":"import Axios from 'axios';\nexport const AUTHENTICATION = 'AUTHENTICATION';\nexport const LOGOUT = 'LOGOUT';\nexport const login = (email, password) => {\n  return async (dispatch, getState) => {\n    const response = await fetch('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAYKf9Bsifod7s9S8GFbarUwQJ0t8XzZs4', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password,\n        returnSecureToken: true\n      })\n    });\n\n    if (!response.ok) {\n      const errorResponse = await response.json();\n      const errorId = errorResponse.error.message;\n\n      if (errorId === 'EMAIL_NOT_FOUND') {\n        throw new Error('Invalid Email or Password');\n      } else if (errorId === 'INVALID_PASSWORD') {\n        throw new Error('Invalid Email or Password');\n      } else if (errorId === 'USER_DISABLED') {\n        throw new Error('Your account is Inactive');\n      }\n    }\n\n    const responseData = await response.json();\n    dispatch(authenticate(responseData.idToken, responseData.localId, parseInt(responseData.expiresIn) * 100));\n    const expiryDate = new Date(new Date().getTime() + parseInt(responseData.expiresIn) * 100);\n    saveData(responseData.idToken, responseData.localId, expiryDate);\n  };\n};\nexport const signup = (email, password) => {\n  return async dispatch => {\n    const response = await fetch('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAYKf9Bsifod7s9S8GFbarUwQJ0t8XzZs4', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password,\n        returnSecureToken: true\n      })\n    });\n\n    if (!response.ok) {\n      const errorResponse = await response.json();\n      const errorId = errorResponse.error.message;\n\n      if (errorId === 'EMAIL_EXISTS') {\n        throw new Error('The email address is already in use by another account.');\n      } else if (errorId === 'OPERATION_NOT_ALLOWED') {\n        throw new Error('Password sign-in is disabled for this project');\n      } else if (errorId === 'TOO_MANY_ATTEMPTS_TRY_LATER') {\n        throw new Error('We have blocked all requests from this device due to unusual activity. Try again later.');\n      }\n    }\n\n    const responseData = await response.json();\n    console.log('SIGNUP RESPONSE', responseData);\n    dispatch(authenticate(responseData.idToken, responseData.localId, parseInt(responseData.expiresIn * 100)));\n    const expiryDate = new Date(new Date().getTime() + parseInt(responseData.expiresIn) * 100);\n    saveData(responseData.idToken, responseData.localId, expiryDate);\n  };\n};\nexport const authenticate = (token, userId, expiryTime) => {\n  return dispatch => {\n    dispatch({\n      type: AUTHENTICATION,\n      token: token,\n      userId: userId\n    });\n  };\n};\nexport const logout = (token, userId) => {\n  localStorage.removeItem('userData');\n  return {\n    type: LOGOUT\n  };\n};\nexport const setUser = () => {\n  const token = localStorage.getItem('userAuthToken');\n  return async (dispatch, getState) => {\n    const url = \"https://keepnotesec.herokuapp.com/api/users/account\";\n\n    try {\n      const response = await Axios({\n        method: 'post',\n        url: url,\n        data: {},\n        headers: {\n          \"x-auth\": token\n        }\n      });\n      const responseData = await response.data;\n      dispatch({\n        type: 'SET_USER',\n        payload: responseData\n      });\n    } catch (error) {\n      console.log(\"ERROR\", error);\n    }\n  };\n};\n\nconst saveData = (token, userId, expiryDate) => {\n  localStorage.setItem('userData', JSON.stringify({\n    token: token,\n    userId: userId,\n    expiryDate: expiryDate\n  }));\n};","map":{"version":3,"sources":["/home/s/personal/Javascript/React/contesting-engine/src/REDUX_STORE/ACTIONS/UserAction.js"],"names":["Axios","AUTHENTICATION","LOGOUT","login","email","password","dispatch","getState","response","fetch","method","headers","body","JSON","stringify","returnSecureToken","ok","errorResponse","json","errorId","error","message","Error","responseData","authenticate","idToken","localId","parseInt","expiresIn","expiryDate","Date","getTime","saveData","signup","console","log","token","userId","expiryTime","type","logout","localStorage","removeItem","setUser","getItem","url","data","payload","setItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,MAAM,GAAG,QAAf;AAEP,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACpC,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CACtB,mHADsB,EAEtB;AACEC,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFX;AAKEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAClBV,QAAAA,KAAK,EAAEA,KADW;AAElBC,QAAAA,QAAQ,EAAEA,QAFQ;AAGlBU,QAAAA,iBAAiB,EAAE;AAHD,OAAf;AALR,KAFsB,CAA5B;;AAeA,QAAG,CAACP,QAAQ,CAACQ,EAAb,EAAgB;AACf,YAAMC,aAAa,GAAG,MAAMT,QAAQ,CAACU,IAAT,EAA5B;AACA,YAAMC,OAAO,GAAGF,aAAa,CAACG,KAAd,CAAoBC,OAApC;;AACC,UAAGF,OAAO,KAAK,iBAAf,EAAiC;AACjC,cAAM,IAAIG,KAAJ,CAAU,2BAAV,CAAN;AACC,OAFD,MAEM,IAAGH,OAAO,KAAK,kBAAf,EAAkC;AACvC,cAAM,IAAIG,KAAJ,CAAU,2BAAV,CAAN;AACA,OAFK,MAEA,IAAGH,OAAO,KAAK,eAAf,EAA+B;AACpC,cAAM,IAAIG,KAAJ,CAAU,0BAAV,CAAN;AACA;AACF;;AAED,UAAMC,YAAY,GAAG,MAAMf,QAAQ,CAACU,IAAT,EAA3B;AAEAZ,IAAAA,QAAQ,CAACkB,YAAY,CAACD,YAAY,CAACE,OAAd,EAAuBF,YAAY,CAACG,OAApC,EAA6CC,QAAQ,CAACJ,YAAY,CAACK,SAAd,CAAR,GAAmC,GAAhF,CAAb,CAAR;AACA,UAAMC,UAAU,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBJ,QAAQ,CAACJ,YAAY,CAACK,SAAd,CAAR,GAAmC,GAAnE,CAAnB;AACAI,IAAAA,QAAQ,CAACT,YAAY,CAACE,OAAd,EAAuBF,YAAY,CAACG,OAApC,EAA6CG,UAA7C,CAAR;AACA,GAjCD;AAkCA,CAnCM;AAqCP,OAAO,MAAMI,MAAM,GAAG,CAAC7B,KAAD,EAAQC,QAAR,KAAqB;AAC1C,SAAO,MAAMC,QAAN,IAAkB;AACxB,UAAME,QAAQ,GAAG,MAAMC,KAAK,CACtB,uGADsB,EAEtB;AACEC,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFX;AAKEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAClBV,QAAAA,KAAK,EAAEA,KADW;AAElBC,QAAAA,QAAQ,EAAEA,QAFQ;AAGlBU,QAAAA,iBAAiB,EAAE;AAHD,OAAf;AALR,KAFsB,CAA5B;;AAeA,QAAG,CAACP,QAAQ,CAACQ,EAAb,EAAgB;AACf,YAAMC,aAAa,GAAG,MAAMT,QAAQ,CAACU,IAAT,EAA5B;AACA,YAAMC,OAAO,GAAGF,aAAa,CAACG,KAAd,CAAoBC,OAApC;;AACC,UAAGF,OAAO,KAAK,cAAf,EAA8B;AAC9B,cAAM,IAAIG,KAAJ,CAAU,yDAAV,CAAN;AACC,OAFD,MAEM,IAAGH,OAAO,KAAK,uBAAf,EAAuC;AAC5C,cAAM,IAAIG,KAAJ,CAAU,+CAAV,CAAN;AACA,OAFK,MAEA,IAAGH,OAAO,KAAK,6BAAf,EAA6C;AAClD,cAAM,IAAIG,KAAJ,CAAU,yFAAV,CAAN;AACA;AACF;;AAED,UAAMC,YAAY,GAAG,MAAMf,QAAQ,CAACU,IAAT,EAA3B;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BZ,YAA/B;AACAjB,IAAAA,QAAQ,CAACkB,YAAY,CAACD,YAAY,CAACE,OAAd,EAAuBF,YAAY,CAACG,OAApC,EAA6CC,QAAQ,CAACJ,YAAY,CAACK,SAAb,GAAyB,GAA1B,CAArD,CAAb,CAAR;AAEA,UAAMC,UAAU,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBJ,QAAQ,CAACJ,YAAY,CAACK,SAAd,CAAR,GAAmC,GAAnE,CAAnB;AACAI,IAAAA,QAAQ,CAACT,YAAY,CAACE,OAAd,EAAuBF,YAAY,CAACG,OAApC,EAA6CG,UAA7C,CAAR;AACA,GAlCD;AAmCA,CApCM;AAsCP,OAAO,MAAML,YAAY,GAAG,CAACY,KAAD,EAASC,MAAT,EAAiBC,UAAjB,KAAgC;AAC3D,SAAOhC,QAAQ,IAAI;AAClBA,IAAAA,QAAQ,CAAC;AACRiC,MAAAA,IAAI,EAAEtC,cADE;AAERmC,MAAAA,KAAK,EAAEA,KAFC;AAGRC,MAAAA,MAAM,EAAEA;AAHA,KAAD,CAAR;AAKA,GAND;AAOA,CARM;AAUP,OAAO,MAAMG,MAAM,GAAG,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACxCI,EAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACA,SAAO;AAACH,IAAAA,IAAI,EAAErC;AAAP,GAAP;AACA,CAHM;AAKP,OAAO,MAAMyC,OAAO,GAAG,MAAM;AAC5B,QAAMP,KAAK,GAAGK,YAAY,CAACG,OAAb,CAAqB,eAArB,CAAd;AAEA,SAAO,OAAOtC,QAAP,EAAiBC,QAAjB,KAA8B;AAEpC,UAAMsC,GAAG,GAAG,qDAAZ;;AACA,QAAI;AACH,YAAMrC,QAAQ,GAAG,MAAMR,KAAK,CAAC;AACnBU,QAAAA,MAAM,EAAE,MADW;AAEnBmC,QAAAA,GAAG,EAAEA,GAFc;AAGnBC,QAAAA,IAAI,EAAE,EAHa;AAInBnC,QAAAA,OAAO,EAAE;AAAC,oBAAUyB;AAAX;AAJU,OAAD,CAA5B;AAOG,YAAMb,YAAY,GAAG,MAAMf,QAAQ,CAACsC,IAApC;AACAxC,MAAAA,QAAQ,CAAC;AAACiC,QAAAA,IAAI,EAAE,UAAP;AAAkBQ,QAAAA,OAAO,EAAExB;AAA3B,OAAD,CAAR;AACH,KAVD,CAUC,OAAMH,KAAN,EAAY;AACZc,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBf,KAArB;AACA;AACD,GAhBD;AAiBA,CApBM;;AAsBP,MAAMY,QAAQ,GAAG,CAACI,KAAD,EAAQC,MAAR,EAAgBR,UAAhB,KAA+B;AAC/CY,EAAAA,YAAY,CAACO,OAAb,CAAqB,UAArB,EAAiCnC,IAAI,CAACC,SAAL,CAAe;AAACsB,IAAAA,KAAK,EAAEA,KAAR;AAAeC,IAAAA,MAAM,EAAEA,MAAvB;AAA+BR,IAAAA,UAAU,EAAEA;AAA3C,GAAf,CAAjC;AACA,CAFD","sourcesContent":["import Axios from 'axios'\n\nexport const AUTHENTICATION = 'AUTHENTICATION'\nexport const LOGOUT = 'LOGOUT'\n\nexport const login = (email, password) => {\n\treturn async (dispatch, getState) => {\n\t\tconst response = await fetch(\n\t      \t'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAYKf9Bsifod7s9S8GFbarUwQJ0t8XzZs4',\n\t      \t{\n\t        \tmethod: 'POST',\n\t        \theaders: {\n\t          \t'Content-Type': 'application/json'\n\t        \t},\n\t\t        body: JSON.stringify({\n\t\t          \temail: email,\n\t\t          \tpassword: password,\n\t\t          \treturnSecureToken: true\n\t\t        })\n      \t\t}\n    \t);\n\n\t\tif(!response.ok){\n\t\t\tconst errorResponse = await response.json()\n\t\t\tconst errorId = errorResponse.error.message\n\t\t\t if(errorId === 'EMAIL_NOT_FOUND'){\n\t\t\t\tthrow new Error('Invalid Email or Password')\n\t\t\t }else if(errorId === 'INVALID_PASSWORD'){\n\t\t\t \tthrow new Error('Invalid Email or Password')\n\t\t\t }else if(errorId === 'USER_DISABLED'){\n\t\t\t \tthrow new Error('Your account is Inactive')\n\t\t\t }\n\t\t}\n\n\t\tconst responseData = await response.json()\n\n\t\tdispatch(authenticate(responseData.idToken, responseData.localId, parseInt(responseData.expiresIn) * 100))\n\t\tconst expiryDate = new Date(new Date().getTime() + parseInt(responseData.expiresIn) * 100);\n\t\tsaveData(responseData.idToken, responseData.localId, expiryDate)\n\t}\n}\n\nexport const signup = (email, password) => {\n\treturn async dispatch => {\n\t\tconst response = await fetch(\n\t      \t'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAYKf9Bsifod7s9S8GFbarUwQJ0t8XzZs4',\n\t      \t{\n\t        \tmethod: 'POST',\n\t        \theaders: {\n\t          \t'Content-Type': 'application/json'\n\t        \t},\n\t\t        body: JSON.stringify({\n\t\t          \temail: email,\n\t\t          \tpassword: password,\n\t\t          \treturnSecureToken: true\n\t\t        })\n      \t\t}\n    \t);\n\n\t\tif(!response.ok){\n\t\t\tconst errorResponse = await response.json()\n\t\t\tconst errorId = errorResponse.error.message\n\t\t\t if(errorId === 'EMAIL_EXISTS'){\n\t\t\t\tthrow new Error('The email address is already in use by another account.')\n\t\t\t }else if(errorId === 'OPERATION_NOT_ALLOWED'){\n\t\t\t \tthrow new Error('Password sign-in is disabled for this project')\n\t\t\t }else if(errorId === 'TOO_MANY_ATTEMPTS_TRY_LATER'){\n\t\t\t \tthrow new Error('We have blocked all requests from this device due to unusual activity. Try again later.')\n\t\t\t }\n\t\t}\n\n\t\tconst responseData = await response.json()\n\t\tconsole.log('SIGNUP RESPONSE', responseData)\n\t\tdispatch(authenticate(responseData.idToken, responseData.localId, parseInt(responseData.expiresIn * 100)))\n\n\t\tconst expiryDate = new Date(new Date().getTime() + parseInt(responseData.expiresIn) * 100);\n\t\tsaveData(responseData.idToken, responseData.localId, expiryDate)\n\t}\n}\n\nexport const authenticate = (token , userId, expiryTime) => {\n\treturn dispatch => {\n\t\tdispatch({\n\t\t\ttype: AUTHENTICATION,\n\t\t\ttoken: token,\n\t\t\tuserId: userId\n\t\t})\n\t} \n}\n\nexport const logout = (token, userId) => {\n\tlocalStorage.removeItem('userData')\n\treturn {type: LOGOUT}\n}\n\nexport const setUser = () => {\n\tconst token = localStorage.getItem('userAuthToken') \n\n\treturn async (dispatch, getState) => {\n\t\t\n\t\tconst url = \"https://keepnotesec.herokuapp.com/api/users/account\"\n\t\ttry {\n\t\t\tconst response = await Axios({\n            \tmethod: 'post',\n            \turl: url,\n            \tdata: {},\n            \theaders: {\"x-auth\": token}\n        \t})\n\n\t\t    const responseData = await response.data\n\t\t    dispatch({type: 'SET_USER',payload: responseData})\n\t\t}catch(error){\n\t\t\tconsole.log(\"ERROR\", error)\n\t\t}\n\t}\n}\n\nconst saveData = (token, userId, expiryDate) => {\n\tlocalStorage.setItem('userData', JSON.stringify({token: token, userId: userId, expiryDate: expiryDate}))\n}"]},"metadata":{},"sourceType":"module"}