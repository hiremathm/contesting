{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      let updatedState = { ...state,\n        inputs: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        formIsValid\n      };\n      return updatedState;\n\n    case 'SET_DATA':\n      return { ...state,\n        inputs: action.inputs,\n        formIsValid: action.formIsValid\n      };\n\n    default:\n      return state;\n  }\n}; // export const useForm = (initialInputs, initialFormValidity) => {\n// \tconst [formState, dispatchForm] = useReducer(\n// \t\tformReducer, { inputs: initialInputs, formIsValid: initialFormValidity }\n// \t)\n// \tconst inputHandler = useCallback((inputId, value, isValid) => {\n// \t\tconsole.log(\"INPUT HANDLER\", inputId, value, isValid)\n// \t\tdispatchForm({\n// \t\t\ttype: 'INPUT_CHANGE',\n// \t\t\tvalue,isValid,inputId\n// \t\t})\n// \t\t// console.log(\"formState\", formState)\n// \t}, [])\n// \tconst setFormData = useCallback((inputs, formIsValid) => {\n// \t\t// console.log(\"INPUTS\", inputs, formIsValid)\n// \t\tdispatchForm({\n// \t\t\ttype: 'SET_DATA',\n// \t\t\tinputs, formIsValid \n// \t\t})\n// \t}, [])\n// \treturn [formState, inputHandler, setFormData]\n// }\n\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  _s();\n\n  const [formState, dispactchLoginForm] = useReducer(formReducer, {\n    inputs: initialInputs,\n    formIsValid: initialFormValidity\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispactchLoginForm({\n      type: 'INPUT_CHANGE',\n      value,\n      isValid,\n      inputId: id\n    });\n  }, []);\n  const setFormData = useCallback((inputData, formIsValid) => {\n    dispactchLoginForm({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid\n    });\n  }, []);\n  return [formState, inputHandler, setFormData];\n};\n\n_s(useForm, \"E+TKNVEqO6zFWJDjM6HT6E+D+8E=\");","map":{"version":3,"sources":["/home/s/personal/Javascript/React/contesting-engine/src/CUSTOM_HOOKS/formHook.js"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","updatedState","value","useForm","initialInputs","initialFormValidity","formState","dispactchLoginForm","inputHandler","id","setFormData","inputData"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,cAAL;AACI,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAI,MAAMC,OAAV,IAAqBJ,KAAK,CAACK,MAA3B,EAAkC;AAC9B,YAAG,CAACL,KAAK,CAACK,MAAN,CAAaD,OAAb,CAAJ,EAA0B;AACtB;AACH;;AACD,YAAGA,OAAO,KAAKH,MAAM,CAACG,OAAtB,EAA8B;AAC1BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACH,SAFD,MAEK;AACDH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACH;AACJ;;AAED,UAAIC,YAAY,GAAG,EACf,GAAGP,KADY;AAEfK,QAAAA,MAAM,EAAE,EACJ,GAAGL,KAAK,CAACK,MADL;AAEJ,WAACJ,MAAM,CAACG,OAAR,GAAkB;AACdI,YAAAA,KAAK,EAAEP,MAAM,CAACO,KADA;AAEdF,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAFF;AAFd,SAFO;AASfH,QAAAA;AATe,OAAnB;AAWA,aAAOI,YAAP;;AACJ,SAAK,UAAL;AACI,aAAO,EACH,GAAGP,KADA;AAEHK,QAAAA,MAAM,EAAEJ,MAAM,CAACI,MAFZ;AAGHF,QAAAA,WAAW,EAAEF,MAAM,CAACE;AAHjB,OAAP;;AAKJ;AACI,aAAOH,KAAP;AAjCR;AAmCH,CApCD,C,CAsCA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,OAAO,MAAMS,OAAO,GAAG,CAACC,aAAD,EAAgBC,mBAAhB,KAAwC;AAAA;;AAE3D,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCf,UAAU,CAACC,WAAD,EAAc;AAC5DM,IAAAA,MAAM,EAAEK,aADoD;AAE5DP,IAAAA,WAAW,EAAEQ;AAF+C,GAAd,CAAlD;AAKA,QAAMG,YAAY,GAAGjB,WAAW,CAAC,CAACkB,EAAD,EAAKP,KAAL,EAAYF,OAAZ,KAAwB;AACrDO,IAAAA,kBAAkB,CAAC;AACfX,MAAAA,IAAI,EAAE,cADS;AAEfM,MAAAA,KAFe;AAERF,MAAAA,OAFQ;AAECF,MAAAA,OAAO,EAAEW;AAFV,KAAD,CAAlB;AAIH,GAL+B,EAK7B,EAL6B,CAAhC;AAOA,QAAMC,WAAW,GAAGnB,WAAW,CAAC,CAACoB,SAAD,EAAYd,WAAZ,KAA4B;AACxDU,IAAAA,kBAAkB,CAAC;AACfX,MAAAA,IAAI,EAAE,UADS;AAEfG,MAAAA,MAAM,EAAEY,SAFO;AAGfd,MAAAA;AAHe,KAAD,CAAlB;AAKH,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACS,SAAD,EAAYE,YAAZ,EAA0BE,WAA1B,CAAP;AACH,CAvBM;;GAAMP,O","sourcesContent":["import { useCallback, useReducer } from 'react'\n\nconst formReducer = (state, action) => {\n    switch(action.type){\n        case 'INPUT_CHANGE':\n            let formIsValid = true\n            for(const inputId in state.inputs){\n                if(!state.inputs[inputId]){\n                    continue\n                }\n                if(inputId === action.inputId){\n                    formIsValid = formIsValid && action.isValid\n                }else{\n                    formIsValid = formIsValid && state.inputs[inputId].isValid\n                }\n            }\n\n            let updatedState = {\n                ...state,\n                inputs: {\n                    ...state.inputs,\n                    [action.inputId]: {\n                        value: action.value,\n                        isValid: action.isValid\n                    }\n                },\n                formIsValid\n            }\n            return updatedState;\n        case 'SET_DATA':\n            return {\n                ...state,\n                inputs: action.inputs,\n                formIsValid: action.formIsValid\n            }\n        default: \n            return state;\n    }\n}\n\n// export const useForm = (initialInputs, initialFormValidity) => {\n// \tconst [formState, dispatchForm] = useReducer(\n// \t\tformReducer, { inputs: initialInputs, formIsValid: initialFormValidity }\n// \t)\n\n// \tconst inputHandler = useCallback((inputId, value, isValid) => {\n\n// \t\tconsole.log(\"INPUT HANDLER\", inputId, value, isValid)\n// \t\tdispatchForm({\n// \t\t\ttype: 'INPUT_CHANGE',\n// \t\t\tvalue,isValid,inputId\n// \t\t})\n// \t\t// console.log(\"formState\", formState)\n// \t}, [])\n\n// \tconst setFormData = useCallback((inputs, formIsValid) => {\n// \t\t// console.log(\"INPUTS\", inputs, formIsValid)\n// \t\tdispatchForm({\n// \t\t\ttype: 'SET_DATA',\n// \t\t\tinputs, formIsValid \n// \t\t})\n// \t}, [])\n\n// \treturn [formState, inputHandler, setFormData]\n// }\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n\n    const [formState, dispactchLoginForm] = useReducer(formReducer, {\n        inputs: initialInputs,\n        formIsValid: initialFormValidity\n    })\n\n    const inputHandler = useCallback((id, value, isValid) => {\n        dispactchLoginForm({\n            type: 'INPUT_CHANGE',\n            value, isValid, inputId: id\n        })\n    }, [])\n\n    const setFormData = useCallback((inputData, formIsValid) => {\n        dispactchLoginForm({\n            type: 'SET_DATA',\n            inputs: inputData,\n            formIsValid\n        })\n    }, [])\n\n    return [formState, inputHandler, setFormData]\n}"]},"metadata":{},"sourceType":"module"}