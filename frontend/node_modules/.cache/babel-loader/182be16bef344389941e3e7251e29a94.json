{"ast":null,"code":"import _slicedToArray from\"/home/s/personal/Javascript/React/contesting-engine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/home/s/personal/Javascript/React/contesting-engine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/s/personal/Javascript/React/contesting-engine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useCallback,useReducer}from'react';var formReducer=function formReducer(state,action){switch(action.type){case'INPUT_CHANGE':var formIsValid=true;for(var inputId in state.inputs){if(!state.inputs[inputId]){continue;}if(inputId===action.inputId){formIsValid=formIsValid&&action.isValid;}else{formIsValid=formIsValid&&state.inputs[inputId].isValid;}}var updatedState=_objectSpread(_objectSpread({},state),{},{inputs:_objectSpread(_objectSpread({},state.inputs),{},_defineProperty({},action.inputId,{value:action.value,isValid:action.isValid})),formIsValid:formIsValid});return updatedState;default:return state;}};export var useForm=function useForm(initialInputs,initialFormValidity){var _useReducer=useReducer(formReducer,{inputs:initialInputs,formIsValid:initialFormValidity}),_useReducer2=_slicedToArray(_useReducer,2),formState=_useReducer2[0],dispatchForm=_useReducer2[1];var inputHandler=useCallback(function(inputId,value,isValid){dispatchForm({type:'INPUT_CHANGE',value:value,isValid:isValid,inputId:inputId});// console.log(\"formState\", formState)\n},[]);var setFormData=useCallback(function(inputs,formIsValid){// console.log(\"INPUTS\", inputs, formIsValid)\ndispatchForm({type:'SET_DATA',inputs:inputs,formIsValid:formIsValid});},[]);return[formState,inputHandler,setFormData];};","map":{"version":3,"sources":["/home/s/personal/Javascript/React/contesting-engine/src/CUSTOM_HOOKS/formHook.js"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","updatedState","value","useForm","initialInputs","initialFormValidity","formState","dispatchForm","inputHandler","setFormData"],"mappings":"+fAAA,OAASA,WAAT,CAAsBC,UAAtB,KAAwC,OAAxC,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAQC,MAAR,CAAmB,CACtC,OAAOA,MAAM,CAACC,IAAd,EACC,IAAK,cAAL,CACC,GAAIC,CAAAA,WAAW,CAAG,IAAlB,CACA,IAAI,GAAMC,CAAAA,OAAV,GAAqBJ,CAAAA,KAAK,CAACK,MAA3B,CAAkC,CACjC,GAAG,CAACL,KAAK,CAACK,MAAN,CAAaD,OAAb,CAAJ,CAA0B,CACzB,SACA,CACD,GAAGA,OAAO,GAAKH,MAAM,CAACG,OAAtB,CAA8B,CAC7BD,WAAW,CAAGA,WAAW,EAAIF,MAAM,CAACK,OAApC,CACA,CAFD,IAEK,CACJH,WAAW,CAAGA,WAAW,EAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD,CACA,CACD,CAED,GAAIC,CAAAA,YAAY,gCACZP,KADY,MAEfK,MAAM,gCACFL,KAAK,CAACK,MADJ,wBAEJJ,MAAM,CAACG,OAFH,CAEa,CACjBI,KAAK,CAAEP,MAAM,CAACO,KADG,CAEjBF,OAAO,CAAEL,MAAM,CAACK,OAFC,CAFb,EAFS,CASfH,WAAW,CAAXA,WATe,EAAhB,CAYA,MAAOI,CAAAA,YAAP,CACD,QACC,MAAOP,CAAAA,KAAP,CA5BF,CA8BA,CA/BD,CAiCA,MAAO,IAAMS,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,aAAD,CAAgBC,mBAAhB,CAAwC,iBAC5Bb,UAAU,CAC3CC,WAD2C,CAC9B,CAAEM,MAAM,CAAEK,aAAV,CAAyBP,WAAW,CAAEQ,mBAAtC,CAD8B,CADkB,4CACvDC,SADuD,iBAC5CC,YAD4C,iBAK9D,GAAMC,CAAAA,YAAY,CAAGjB,WAAW,CAAC,SAACO,OAAD,CAAUI,KAAV,CAAiBF,OAAjB,CAA6B,CAC7DO,YAAY,CAAC,CACZX,IAAI,CAAE,cADM,CAEZM,KAAK,CAALA,KAFY,CAENF,OAAO,CAAPA,OAFM,CAEEF,OAAO,CAAPA,OAFF,CAAD,CAAZ,CAIA;AACA,CAN+B,CAM7B,EAN6B,CAAhC,CAQA,GAAMW,CAAAA,WAAW,CAAGlB,WAAW,CAAC,SAACQ,MAAD,CAASF,WAAT,CAAyB,CACxD;AACAU,YAAY,CAAC,CACZX,IAAI,CAAE,UADM,CAEZG,MAAM,CAANA,MAFY,CAEJF,WAAW,CAAXA,WAFI,CAAD,CAAZ,CAIA,CAN8B,CAM5B,EAN4B,CAA/B,CAQA,MAAO,CAACS,SAAD,CAAYE,YAAZ,CAA0BC,WAA1B,CAAP,CACA,CAtBM","sourcesContent":["import { useCallback, useReducer } from 'react'\n\nconst formReducer = (state, action) => {\n\tswitch(action.type){\n\t\tcase 'INPUT_CHANGE':\n\t\t\tlet formIsValid = true;\n\t\t\tfor(const inputId in state.inputs){\n\t\t\t\tif(!state.inputs[inputId]){\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif(inputId === action.inputId){\n\t\t\t\t\tformIsValid = formIsValid && action.isValid\n\t\t\t\t}else{\n\t\t\t\t\tformIsValid = formIsValid && state.inputs[inputId].isValid\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet updatedState = {\n\t\t\t\t...state,\n\t\t\t\tinputs: {\n\t\t\t\t\t...state.inputs,\n\t\t\t\t\t[action.inputId]: {\n\t\t\t\t\t\tvalue: action.value,\n\t\t\t\t\t\tisValid: action.isValid\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tformIsValid\n\t\t\t}\n\n\t\t\treturn updatedState;\n\t\tdefault: \n\t\t\treturn state\n\t}\n}\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n\tconst [formState, dispatchForm] = useReducer(\n\t\tformReducer, { inputs: initialInputs, formIsValid: initialFormValidity }\n\t)\n\n\tconst inputHandler = useCallback((inputId, value, isValid) => {\n\t\tdispatchForm({\n\t\t\ttype: 'INPUT_CHANGE',\n\t\t\tvalue,isValid,inputId\n\t\t})\n\t\t// console.log(\"formState\", formState)\n\t}, [])\n\n\tconst setFormData = useCallback((inputs, formIsValid) => {\n\t\t// console.log(\"INPUTS\", inputs, formIsValid)\n\t\tdispatchForm({\n\t\t\ttype: 'SET_DATA',\n\t\t\tinputs, formIsValid \n\t\t})\n\t}, [])\n\n\treturn [formState, inputHandler, setFormData]\n}"]},"metadata":{},"sourceType":"module"}