{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/s/personal/Javascript/React/contesting-engine/frontend/src/UI/Input.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect } from 'react';\nimport classes from '../CSS/Input.module.css';\nimport { validate } from '../UTIL/validators';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return { ...state,\n        value: action.value,\n        isValid: validate(action.value, action.validators)\n      };\n\n    case 'TOUCH':\n      return { ...state,\n        isTouched: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  _s();\n\n  const initialState = {\n    value: '',\n    isValid: false,\n    isTouched: false\n  };\n  const [inputState, dispatch] = useReducer(inputReducer, initialState);\n  let inputElement = null;\n\n  const inputChangeHandler = event => {\n    console.log(\"EVENT\", event.target.name, event.target.value);\n    dispatch({\n      type: 'CHANGE',\n      value: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  switch (props.inputtype) {\n    case 'input':\n      inputElement = /*#__PURE__*/_jsxDEV(\"input\", {\n        type: props.type,\n        id: props.id,\n        name: props.name,\n        placeholder: props.placeholder,\n        className: props.Inputstyles ? props.Inputstyles : classes.InputElement,\n        onChange: inputChangeHandler,\n        value: inputState.value,\n        onBlur: touchHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 19\n      }, this);\n      break;\n\n    case 'textarea':\n      inputElement = /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: classes.InputElement,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 19\n      }, this);\n      break;\n\n    case 'select':\n      inputElement = /*#__PURE__*/_jsxDEV(\"select\", {\n        className: props.Inputstyles ? props.Inputstyles : classes.InputElement,\n        onChange: inputChangeHandler,\n        onBlur: touchHandler,\n        children: props.options.map(option => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option.value,\n            className: props.Inputstyles ? props.Inputstyles : classes.InputElement,\n            children: option.text\n          }, option.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 14\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 19\n      }, this);\n      break;\n\n    default:\n      inputElement = /*#__PURE__*/_jsxDEV(\"input\", {\n        className: classes.InputElement,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 19\n      }, this);\n  }\n\n  const {\n    id,\n    onInput\n  } = props;\n  const {\n    value,\n    isValid\n  } = inputState;\n  console.log(\"INPUTSSTATE\", inputState);\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.Input,\n    children: [props.setlabel && /*#__PURE__*/_jsxDEV(\"label\", {\n      className: classes.Label,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 23\n    }, this), inputElement, !inputState.isValid && inputState.isTouched && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.errortext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 52\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Input, \"jLwKxmIUdYgKK/4w1ME6HslpZ2k=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/home/s/personal/Javascript/React/contesting-engine/frontend/src/UI/Input.js"],"names":["React","useReducer","useEffect","classes","validate","inputReducer","state","action","type","value","isValid","validators","isTouched","Input","props","initialState","inputState","dispatch","inputElement","inputChangeHandler","event","console","log","target","name","touchHandler","inputtype","id","placeholder","Inputstyles","InputElement","options","map","option","text","onInput","setlabel","Label","label","errortext"],"mappings":"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","sourcesContent":["import React, {useReducer, useEffect} from 'react'\n\nimport classes from '../CSS/Input.module.css'\nimport { validate } from '../UTIL/validators'\n\nconst inputReducer = (state, action) => {\n\tswitch(action.type){\n\t\tcase 'CHANGE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tvalue: action.value,\n\t\t\t\tisValid: validate(action.value, action.validators)\n\t\t\t}\n\t\tcase 'TOUCH':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisTouched: true\n\t\t\t}\n\t\tdefault: \n\t\t\treturn state\n\t}\n}\n\nconst Input = (props) => {\n\n\tconst initialState = {value: '', isValid: false, isTouched: false}\n\n\tconst [inputState, dispatch] = useReducer(inputReducer, initialState)\n\n\tlet inputElement = null;\n\t\n\tconst inputChangeHandler = event => {\n\t\tconsole.log(\"EVENT\", event.target.name, event.target.value)\n\t\tdispatch({\n\t\t\ttype: 'CHANGE',\n\t\t\tvalue: event.target.value,\n\t\t\tvalidators: props.validators\n\t\t})\n\t}\n\n\tconst touchHandler = () => {\n\t\tdispatch({\n\t\t\ttype: 'TOUCH'\n\t\t})\n\t}\n\n\tswitch(props.inputtype){\n\t\tcase ('input') : \n\t\t\tinputElement = <input  \n\t\t\t\ttype = {props.type} \n\t\t\t\tid = {props.id}\n\t\t\t\tname = {props.name}\n\t\t\t\tplaceholder = {props.placeholder}\n\t\t\t\tclassName={props.Inputstyles ? props.Inputstyles : classes.InputElement}\n\t\t\t\tonChange = {inputChangeHandler}\n\t\t\t\tvalue = {inputState.value}\n\t\t\t\tonBlur = {touchHandler}\n\t\t\t/>\n\t\t\t\n\t\t\tbreak;\n\t\tcase ('textarea') : \n\t\t\tinputElement = <textarea  className = {classes.InputElement} {...props} />\n\t\t\tbreak;\n\t\tcase ('select') :\n\t\t\tinputElement = <select className={props.Inputstyles ? props.Inputstyles : classes.InputElement} \n\t\t\t\t\tonChange = {inputChangeHandler}\n\t\t\t\t\tonBlur = {touchHandler}\n\t\t\t\t>\n\t\t\t\t{\n\t\t\t\t\tprops.options.map(option => {\n\t\t\t\t\t\treturn <option key = {option.value} value = {option.value} className={props.Inputstyles ? props.Inputstyles : classes.InputElement}>{option.text}</option> \t\t\t\t\t\n\t\t\t\t\t})\n\t\t\t\t} \n\t\t\t</select>\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tinputElement = <input className = {classes.InputElement} {...props} />\n\t}\n\n\tconst {id, onInput} = props\n\tconst {value, isValid} = inputState\n\t\n\tconsole.log(\"INPUTSSTATE\", inputState)\n\n\tuseEffect(() => {\n\t\tonInput(id, value, isValid)\n\t}, [id, value, isValid, onInput])\n\n\treturn (\n\t\t<div className = {classes.Input}>\n\t\t\t{props.setlabel && <label className = {classes.Label} >{props.label}</label>}\n\t\t\t{inputElement}\n\t\t\t{!inputState.isValid && inputState.isTouched && <p>{props.errortext}</p>}\n\t\t</div>\n\t)\n}\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}