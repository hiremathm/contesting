{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/s/personal/Javascript/React/contesting-engine/src/CONTAINERS/Auth/Auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport { css } from \"@emotion/core\";\nimport { connect } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { VALIDATOR_REQUIRE, VALIDATOR_EMAIL, VALIDATOR_MIN } from '../../UTIL/validators';\nimport { useForm } from '../../CUSTOM_HOOKS/formHook';\nimport Card from '../../UI/Card';\nimport Button from '../../UI/Button';\nimport Input from '../../UI/Input';\nimport classes from '../../CSS/Auth.module.css'; // actions\n\nimport { login } from '../../REDUX_STORE/ACTIONS/UserAction';\nimport { AuthContext } from '../../CONTEXTS/AuthContext';\n\nconst Auth = props => {\n  _s();\n\n  const Auth = useContext(AuthContext);\n  const override = css`\n\t  display: block;\n\t  margin: 0 auto;\n\t  color: yellow;\n\t`;\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isInvalidLogin, setInvalidLogin] = useState(false);\n  const [message, setMessage] = useState();\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const [formState, inputHandler] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n\n  const sumbmitHandler = async e => {\n    e.preventDefault();\n    let formData = {\n      email: formState.inputs.email.value,\n      password: formState.inputs.password.value\n    };\n\n    try {\n      setIsLoading(true);\n      const {\n        email,\n        password\n      } = formData;\n      await dispatch(login(email, password));\n      setMessage('Successfully SignedIn!!!');\n      setTimeout(() => {\n        setIsLoading(false);\n        Auth.login();\n        props.history.push('/contests');\n      }, 3000);\n    } catch (error) {\n      setInvalidLogin(true);\n      setMessage(error.message);\n      setIsLoading(false);\n    }\n  };\n\n  const changeAuthHandler = () => {\n    setIsLoginMode(!isLoginMode);\n  };\n\n  const authText = isLoginMode ? 'SignIn' : 'SignUp';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.Authentication,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      cardstyles: classes.LoginForm,\n      children: [isInvalidLogin && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 24\n      }, this), !isInvalidLogin && /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          color: 'green'\n        },\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sumbmitHandler,\n        className: classes.LoginForm,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          inputtype: \"input\",\n          type: \"text\",\n          id: \"email\",\n          placeholder: \"Enter email\",\n          label: \"Email\",\n          onInput: inputHandler,\n          errortext: \"Please enter valid email.\",\n          validators: [VALIDATOR_REQUIRE(), VALIDATOR_EMAIL()]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          inputtype: \"input\",\n          type: \"password\",\n          id: \"password\",\n          placeholder: \"Enter password\",\n          element: \"input\",\n          label: \"Password\",\n          onInput: inputHandler,\n          errortext: \"Please enter valid password.\",\n          validators: [VALIDATOR_REQUIRE(), VALIDATOR_MIN(6)]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          size: \"Small\",\n          disabled: !formState.formIsValid,\n          children: [isLoading && /*#__PURE__*/_jsxDEV(PulseLoader, {\n            color: \"white\",\n            loading: isLoading,\n            size: 5,\n            css: override\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 33\n          }, this), authText]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        size: \"Small\",\n        onClick: changeAuthHandler,\n        children: isLoginMode ? 'Are you new User?' : 'Are you registered already?'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Auth, \"zHt/W0TYGYZQWCfIqvoeAodiBNA=\", false, function () {\n  return [useDispatch, useForm];\n});\n\n_c = Auth;\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  };\n};\n\nexport default connect(mapStateToProps)(Auth);\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["/home/s/personal/Javascript/React/contesting-engine/src/CONTAINERS/Auth/Auth.js"],"names":["React","useContext","useState","PulseLoader","css","connect","useDispatch","VALIDATOR_REQUIRE","VALIDATOR_EMAIL","VALIDATOR_MIN","useForm","Card","Button","Input","classes","login","AuthContext","Auth","props","override","dispatch","isLoading","setIsLoading","isInvalidLogin","setInvalidLogin","message","setMessage","isLoginMode","setIsLoginMode","formState","inputHandler","email","value","isValid","password","sumbmitHandler","e","preventDefault","formData","inputs","setTimeout","history","push","error","changeAuthHandler","authText","Authentication","LoginForm","color","formIsValid","mapStateToProps","state","user"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react'\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport { css } from \"@emotion/core\";\nimport { connect } from 'react-redux'\nimport {useDispatch} from 'react-redux'\n\nimport {VALIDATOR_REQUIRE, VALIDATOR_EMAIL, VALIDATOR_MIN} from '../../UTIL/validators'\nimport {useForm} from '../../CUSTOM_HOOKS/formHook'\n\nimport Card from '../../UI/Card'\nimport Button from '../../UI/Button'\nimport Input from '../../UI/Input'\n\nimport classes from '../../CSS/Auth.module.css'\n\n// actions\nimport {login} from '../../REDUX_STORE/ACTIONS/UserAction'\n\nimport { AuthContext } from '../../CONTEXTS/AuthContext'\n\nconst Auth = (props) => {\n\tconst Auth = useContext(AuthContext)\n\n\tconst override = css`\n\t  display: block;\n\t  margin: 0 auto;\n\t  color: yellow;\n\t`;\n\n\tconst dispatch = useDispatch()\n\tconst [isLoading, setIsLoading] = useState(false)\n\tconst [isInvalidLogin, setInvalidLogin] = useState(false)\n\tconst [message, setMessage] = useState()\n\tconst [isLoginMode, setIsLoginMode] = useState(true)\n\tconst [formState, inputHandler] = useForm({\n            email: {\n                value: '',\n                isValid: false\n            },\n            password: {\n                value: '',\n                isValid: false\n            }\n        }, false)\n\t\n\n\tconst sumbmitHandler = async (e) => {\n\t\te.preventDefault()\n\n\t\tlet formData = {\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n        }\n\n        try{\n        \tsetIsLoading(true)\n    \t    const {email, password} = formData\n\t        await dispatch(login(email, password))\n\t        setMessage('Successfully SignedIn!!!')\n\t        setTimeout(() => {\n\t        \tsetIsLoading(false)\n\t        \tAuth.login()\n\t        \tprops.history.push('/contests')\n\t        }, 3000)\n        }catch(error){\n        \tsetInvalidLogin(true)\n        \tsetMessage(error.message)\n        \tsetIsLoading(false)\n        }\n\t}\n\n\tconst changeAuthHandler = () => {\n\t\tsetIsLoginMode(!isLoginMode)\n\t}\n\n\tconst authText = isLoginMode ? 'SignIn' : 'SignUp'\n\n\treturn (\n\t\t<div className = {classes.Authentication}>\n\t\t\t<Card cardstyles = {classes.LoginForm} >\n\t\t\t\t{isInvalidLogin && <p>{message}</p>}\n\t\t\t\t{!isInvalidLogin && <h3 style = {{color: 'green'}}>{message}</h3>}\n\t\t\t\t\n\t\t\t\t<form onSubmit = {sumbmitHandler} className = {classes.LoginForm}>\n\t\t\t\t\t<Input\n\t                \tinputtype = \"input\" \n\t                    type = \"text\"\n\t                    id = \"email\"\n\t                    placeholder = \"Enter email\"\n\t                    label = \"Email\"\n\t                    onInput = {inputHandler}\n\t                    errortext = \"Please enter valid email.\"\n\t                    validators = {[VALIDATOR_REQUIRE(), VALIDATOR_EMAIL()]}\n\t                />\n\n\t                <Input \n\t                \tinputtype = \"input\"\n\t                    type = \"password\"\n\t                    id = \"password\"\n\t                    placeholder = \"Enter password\"\n\t                    element = \"input\"\n\t                    label = \"Password\"\n\t                    onInput = {inputHandler}\n\t                    errortext = \"Please enter valid password.\"\n\t                    validators = {[VALIDATOR_REQUIRE(), VALIDATOR_MIN(6)]}\n\t                />\n\n\t                <Button \n\t                \ttype = \"submit\"\n\t                \tsize = \"Small\"\n\t                \tdisabled = {!formState.formIsValid}\n\t                >\n\t                \t{isLoading && <PulseLoader color=\"white\" loading={isLoading} size={5} css={override}/>}\n\n\t                \t{authText}\n\t                </Button>\n\n\t\t\t\t</form>\n\t\t\t\t<strong size = \"Small\" onClick = {changeAuthHandler}>{isLoginMode ? 'Are you new User?' : 'Are you registered already?'}</strong>\n\t\t\t</Card>\n\t\t</div>\n\t)\n}\n\nconst mapStateToProps = (state) => {\n    return {user: state.user}\n}\n\nexport default connect(mapStateToProps)(Auth);"]},"metadata":{},"sourceType":"module"}