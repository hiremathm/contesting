{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      let updatedState = { ...state,\n        inputs: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        formIsValid\n      };\n      return updatedState;\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  _s();\n\n  const [formState, dispatchForm] = useReducer(formReducer, {\n    inputs: initialInputs,\n    formIsValid: initialFormValidity\n  });\n  const inputHandler = useCallback((inputId, value, isValid) => {\n    dispatchForm({\n      type: 'INPUT_CHANGE',\n      value,\n      isValid,\n      inputId\n    }); // console.log(\"formState\", formState)\n  }, []);\n  const setFormData = useCallback((inputs, formIsValid) => {\n    // console.log(\"INPUTS\", inputs, formIsValid)\n    dispatchForm({\n      type: 'SET_DATA',\n      inputs,\n      formIsValid\n    });\n  }, []);\n  return [formState, inputHandler, setFormData];\n};\n\n_s(useForm, \"Khtu9cdyXJ+iTpZdsYpmub4I6OQ=\");","map":{"version":3,"sources":["/home/s/personal/Javascript/React/contesting-engine/frontend/src/CUSTOM_HOOKS/formHook.js"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","updatedState","value","useForm","initialInputs","initialFormValidity","formState","dispatchForm","inputHandler","setFormData"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAOA,MAAM,CAACC,IAAd;AACC,SAAK,cAAL;AACC,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAI,MAAMC,OAAV,IAAqBJ,KAAK,CAACK,MAA3B,EAAkC;AACjC,YAAG,CAACL,KAAK,CAACK,MAAN,CAAaD,OAAb,CAAJ,EAA0B;AACzB;AACA;;AACD,YAAGA,OAAO,KAAKH,MAAM,CAACG,OAAtB,EAA8B;AAC7BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACA,SAFD,MAEK;AACJH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACA;AACD;;AAED,UAAIC,YAAY,GAAG,EAClB,GAAGP,KADe;AAElBK,QAAAA,MAAM,EAAE,EACP,GAAGL,KAAK,CAACK,MADF;AAEP,WAACJ,MAAM,CAACG,OAAR,GAAkB;AACjBI,YAAAA,KAAK,EAAEP,MAAM,CAACO,KADG;AAEjBF,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAFC;AAFX,SAFU;AASlBH,QAAAA;AATkB,OAAnB;AAYA,aAAOI,YAAP;;AACD;AACC,aAAOP,KAAP;AA5BF;AA8BA,CA/BD;;AAiCA,OAAO,MAAMS,OAAO,GAAG,CAACC,aAAD,EAAgBC,mBAAhB,KAAwC;AAAA;;AAC9D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bf,UAAU,CAC3CC,WAD2C,EAC9B;AAAEM,IAAAA,MAAM,EAAEK,aAAV;AAAyBP,IAAAA,WAAW,EAAEQ;AAAtC,GAD8B,CAA5C;AAIA,QAAMG,YAAY,GAAGjB,WAAW,CAAC,CAACO,OAAD,EAAUI,KAAV,EAAiBF,OAAjB,KAA6B;AAC7DO,IAAAA,YAAY,CAAC;AACZX,MAAAA,IAAI,EAAE,cADM;AAEZM,MAAAA,KAFY;AAENF,MAAAA,OAFM;AAEEF,MAAAA;AAFF,KAAD,CAAZ,CAD6D,CAK7D;AACA,GAN+B,EAM7B,EAN6B,CAAhC;AAQA,QAAMW,WAAW,GAAGlB,WAAW,CAAC,CAACQ,MAAD,EAASF,WAAT,KAAyB;AACxD;AACAU,IAAAA,YAAY,CAAC;AACZX,MAAAA,IAAI,EAAE,UADM;AAEZG,MAAAA,MAFY;AAEJF,MAAAA;AAFI,KAAD,CAAZ;AAIA,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACS,SAAD,EAAYE,YAAZ,EAA0BC,WAA1B,CAAP;AACA,CAtBM;;GAAMN,O","sourcesContent":["import { useCallback, useReducer } from 'react'\n\nconst formReducer = (state, action) => {\n\tswitch(action.type){\n\t\tcase 'INPUT_CHANGE':\n\t\t\tlet formIsValid = true;\n\t\t\tfor(const inputId in state.inputs){\n\t\t\t\tif(!state.inputs[inputId]){\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif(inputId === action.inputId){\n\t\t\t\t\tformIsValid = formIsValid && action.isValid\n\t\t\t\t}else{\n\t\t\t\t\tformIsValid = formIsValid && state.inputs[inputId].isValid\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet updatedState = {\n\t\t\t\t...state,\n\t\t\t\tinputs: {\n\t\t\t\t\t...state.inputs,\n\t\t\t\t\t[action.inputId]: {\n\t\t\t\t\t\tvalue: action.value,\n\t\t\t\t\t\tisValid: action.isValid\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tformIsValid\n\t\t\t}\n\n\t\t\treturn updatedState;\n\t\tdefault: \n\t\t\treturn state\n\t}\n}\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n\tconst [formState, dispatchForm] = useReducer(\n\t\tformReducer, { inputs: initialInputs, formIsValid: initialFormValidity }\n\t)\n\n\tconst inputHandler = useCallback((inputId, value, isValid) => {\n\t\tdispatchForm({\n\t\t\ttype: 'INPUT_CHANGE',\n\t\t\tvalue,isValid,inputId\n\t\t})\n\t\t// console.log(\"formState\", formState)\n\t}, [])\n\n\tconst setFormData = useCallback((inputs, formIsValid) => {\n\t\t// console.log(\"INPUTS\", inputs, formIsValid)\n\t\tdispatchForm({\n\t\t\ttype: 'SET_DATA',\n\t\t\tinputs, formIsValid \n\t\t})\n\t}, [])\n\n\treturn [formState, inputHandler, setFormData]\n}"]},"metadata":{},"sourceType":"module"}