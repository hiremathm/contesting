{"ast":null,"code":"import Axios from 'axios';\nexport const setUser = () => {\n  const token = localStorage.getItem('userAuthToken');\n  return async (dispatch, getState) => {\n    const url = \"https://keepnotesec.herokuapp.com/api//users/account\";\n\n    try {\n      const response = await Axios({\n        method: 'post',\n        url: url,\n        data: {},\n        headers: {\n          \"x-auth\": token\n        }\n      });\n      const responseData = await response.data;\n      dispatch({\n        type: 'SET_USER',\n        payload: responseData\n      });\n    } catch (error) {\n      console.log(\"ERROR\", error);\n    }\n  };\n};\nexport const login = (email, password) => {\n  return async (dispatch, getState) => {\n    const response = await fetch('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAYKf9Bsifod7s9S8GFbarUwQJ0t8XzZs4', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password,\n        returnSecureToken: true\n      })\n    });\n\n    if (!response.ok) {\n      const errorResponse = await response.json();\n      const errorId = errorResponse.error.message;\n\n      if (errorId === 'EMAIL_NOT_FOUND') {\n        throw new Error('Invalid Email / Password!');\n      } else if (errorId === 'INVALID_PASSWORD') {\n        throw new Error('Invalid Email / Password');\n      } else if (errorId === 'USER_DISABLED') {\n        throw new Error('Your account is Inactive');\n      }\n    }\n\n    const responseData = await response.json();\n    console.log(\"responseData\");\n    const expiryDate = new Date(new Date().getTime() + parseInt(responseData.expiresIn) * 100);\n    saveData(responseData.idToken, responseData.localId, expiryDate);\n  };\n};\n\nconst saveData = (token, userId, expiryDate) => {\n  AsyncStorage.setItem('userData', JSON.stringify({\n    token: token,\n    userId: userId,\n    expiryDate: expiryDate\n  }));\n};","map":{"version":3,"sources":["/home/s/personal/Javascript/React/contesting-engine/src/REDUX_STORE/ACTIONS/UserAction.js"],"names":["Axios","setUser","token","localStorage","getItem","dispatch","getState","url","response","method","data","headers","responseData","type","payload","error","console","log","login","email","password","fetch","body","JSON","stringify","returnSecureToken","ok","errorResponse","json","errorId","message","Error","expiryDate","Date","getTime","parseInt","expiresIn","saveData","idToken","localId","userId","AsyncStorage","setItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC5B,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAd;AAEA,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAEpC,UAAMC,GAAG,GAAG,sDAAZ;;AACA,QAAI;AACH,YAAMC,QAAQ,GAAG,MAAMR,KAAK,CAAC;AACnBS,QAAAA,MAAM,EAAE,MADW;AAEnBF,QAAAA,GAAG,EAAEA,GAFc;AAGnBG,QAAAA,IAAI,EAAE,EAHa;AAInBC,QAAAA,OAAO,EAAE;AAAC,oBAAUT;AAAX;AAJU,OAAD,CAA5B;AAOG,YAAMU,YAAY,GAAG,MAAMJ,QAAQ,CAACE,IAApC;AACAL,MAAAA,QAAQ,CAAC;AAACQ,QAAAA,IAAI,EAAE,UAAP;AAAkBC,QAAAA,OAAO,EAAEF;AAA3B,OAAD,CAAR;AACH,KAVD,CAUC,OAAMG,KAAN,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA;AACD,GAhBD;AAiBA,CApBM;AAsBP,OAAO,MAAMG,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO,OAAOf,QAAP,EAAiBC,QAAjB,KAA8B;AACpC,UAAME,QAAQ,GAAG,MAAMa,KAAK,CACtB,mHADsB,EAEtB;AACEZ,MAAAA,MAAM,EAAE,MADV;AAEEE,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFX;AAKEW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAClBL,QAAAA,KAAK,EAAEA,KADW;AAElBC,QAAAA,QAAQ,EAAEA,QAFQ;AAGlBK,QAAAA,iBAAiB,EAAE;AAHD,OAAf;AALR,KAFsB,CAA5B;;AAeA,QAAG,CAACjB,QAAQ,CAACkB,EAAb,EAAgB;AACf,YAAMC,aAAa,GAAG,MAAMnB,QAAQ,CAACoB,IAAT,EAA5B;AACA,YAAMC,OAAO,GAAGF,aAAa,CAACZ,KAAd,CAAoBe,OAApC;;AACC,UAAGD,OAAO,KAAK,iBAAf,EAAiC;AACjC,cAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;AACC,OAFD,MAEM,IAAGF,OAAO,KAAK,kBAAf,EAAkC;AACvC,cAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;AACA,OAFK,MAEA,IAAGF,OAAO,KAAK,eAAf,EAA+B;AACpC,cAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;AACA;AACF;;AAED,UAAMnB,YAAY,GAAG,MAAMJ,QAAQ,CAACoB,IAAT,EAA3B;AAEAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEA,UAAMe,UAAU,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBC,QAAQ,CAACvB,YAAY,CAACwB,SAAd,CAAR,GAAmC,GAAnE,CAAnB;AACAC,IAAAA,QAAQ,CAACzB,YAAY,CAAC0B,OAAd,EAAuB1B,YAAY,CAAC2B,OAApC,EAA6CP,UAA7C,CAAR;AACA,GAlCD;AAmCA,CApCM;;AAsCP,MAAMK,QAAQ,GAAG,CAACnC,KAAD,EAAQsC,MAAR,EAAgBR,UAAhB,KAA+B;AAC/CS,EAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCnB,IAAI,CAACC,SAAL,CAAe;AAACtB,IAAAA,KAAK,EAAEA,KAAR;AAAesC,IAAAA,MAAM,EAAEA,MAAvB;AAA+BR,IAAAA,UAAU,EAAEA;AAA3C,GAAf,CAAjC;AACA,CAFD","sourcesContent":["import Axios from 'axios'\nexport const setUser = () => {\n\tconst token = localStorage.getItem('userAuthToken') \n\n\treturn async (dispatch, getState) => {\n\t\t\n\t\tconst url = \"https://keepnotesec.herokuapp.com/api//users/account\"\n\t\ttry {\n\t\t\tconst response = await Axios({\n            \tmethod: 'post',\n            \turl: url,\n            \tdata: {},\n            \theaders: {\"x-auth\": token}\n        \t})\n\n\t\t    const responseData = await response.data\n\t\t    dispatch({type: 'SET_USER',payload: responseData})\n\t\t}catch(error){\n\t\t\tconsole.log(\"ERROR\", error)\n\t\t}\n\t}\n}\n\nexport const login = (email, password) => {\n\treturn async (dispatch, getState) => {\n\t\tconst response = await fetch(\n\t      \t'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAYKf9Bsifod7s9S8GFbarUwQJ0t8XzZs4',\n\t      \t{\n\t        \tmethod: 'POST',\n\t        \theaders: {\n\t          \t'Content-Type': 'application/json'\n\t        \t},\n\t\t        body: JSON.stringify({\n\t\t          \temail: email,\n\t\t          \tpassword: password,\n\t\t          \treturnSecureToken: true\n\t\t        })\n      \t\t}\n    \t);\n\n\t\tif(!response.ok){\n\t\t\tconst errorResponse = await response.json()\n\t\t\tconst errorId = errorResponse.error.message\n\t\t\t if(errorId === 'EMAIL_NOT_FOUND'){\n\t\t\t\tthrow new Error('Invalid Email / Password!')\n\t\t\t }else if(errorId === 'INVALID_PASSWORD'){\n\t\t\t \tthrow new Error('Invalid Email / Password')\n\t\t\t }else if(errorId === 'USER_DISABLED'){\n\t\t\t \tthrow new Error('Your account is Inactive')\n\t\t\t }\n\t\t}\n\n\t\tconst responseData = await response.json()\n\n\t\tconsole.log(\"responseData\")\n\n\t\tconst expiryDate = new Date(new Date().getTime() + parseInt(responseData.expiresIn) * 100);\n\t\tsaveData(responseData.idToken, responseData.localId, expiryDate)\n\t}\n}\n\nconst saveData = (token, userId, expiryDate) => {\n\tAsyncStorage.setItem('userData', JSON.stringify({token: token, userId: userId, expiryDate: expiryDate}))\n}"]},"metadata":{},"sourceType":"module"}